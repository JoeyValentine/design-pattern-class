// 디자인 패턴의 핵심!

// 1. 공통성과 가변성의 분리
// A. 변하는 것을 가상함수로!!! - template method
// B. 변하는 것을 다른 클래스로 - strategy, policy base design


// 2. 재귀적 포함을 사용하는 패턴
// => A 는 B를 포함하지만 A도 포함 가능하다.
// => A 와 B는 공통의 기반 클래스 필요 !
// 왜?? 재귀적 포함기술을 사용하는가 ?? "의도"가 뭔가??

// composite : 재귀적 포함을 사용해서 "복합객체" 를 만들려고
// decorator : 재귀적 포함을 기존에 존재하던 객체에
//			   기능을 동적으로 추가하기 위해서!!


// 3. 간접층을 사용해서 문제 해결
// adapter
// proxy
// facade
// bridge 


// 4. 객체의 생성기술


// 5. 통보, 전달, 열거, 방법


// 6. 나머지 패턴들 정리!!!!








