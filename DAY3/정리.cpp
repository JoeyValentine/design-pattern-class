// 디자인 패턴의 핵심!

// 1. 공통성과 가변성의 분리
// A. 변하는 것을 가상함수로!!! - template method
// B. 변하는 것을 다른 클래스로 - strategy, policy base design


// 2. 재귀적 포함을 사용하는 패턴
// => A 는 B를 포함하지만 A도 포함 가능하다.
// => A 와 B는 공통의 기반 클래스 필요 !
// 왜?? 재귀적 포함기술을 사용하는가 ?? "의도"가 뭔가??

// composite : 재귀적 포함을 사용해서 "복합객체" 를 만들려고
// decorator : 재귀적 포함을 기존에 존재하던 객체에
//			   기능을 동적으로 추가하기 위해서!!


// 3. 간접층(중간층, level of indirection)을 사용해서 문제 해결
// => 왜.. 어떤이유로.. 중간계층을 만들었느냐 에 따라 다른 패턴

// 사용자	 =======> stack ============> list 에 저장 : 인터페이이스 변경
//													adapter
// 
// 사용자	 =======> MP3Player ========> IMP3 사용	: 구현과 추상의 상호독립적 update
											// Bridge

// 사용자	 =======> Calc     =========>  원격 서버 : 범용적인 용도의 대행자!
//											// cache, 지연된 생성, 인증등.. 
											// proxy!!
		

// 사용자	 =======> TCPServer ========> Socket, IPAddress 클래스 사용
//								// 사용하기 쉽게, 복잡한 과정에 대한
								// 포괄적인 인터페이스 제공
								// facade















// adapter
// proxy
// facade
// bridge 


// 4. 객체의 생성기술


// 5. 통보, 전달, 열거, 방법


// 6. 나머지 패턴들 정리!!!!








