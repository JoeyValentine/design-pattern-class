// 정리1

// 객체지향 디자인의 핵심 1. 공통성과 가변성의 분리
// => 변하지 않은 코드속에 있는 변하는 부분은 분리되어야 한다.

// 변하는 것을 가상함수로 분리
// => 상속을 통해서 가상함수를 재정의
// => 변하는 정책을 클래스가 소유하게 됨.
// => 실행시간 교체도 안됨
// => template method!
// => 도형편집기 예제 draw()/draw_imp()


// 변하는 것을 다른 클래스로 분리
// => 변하는 정책을 담은 클래스를 어떻게 교체 할것인가 ?
// 1. 인터페이스를 설계해서 set_xxx() 함수로 교체
//	  => 실행시간 교체 가능
//	  => 가상함수의 오버헤드 존재. 느리다.
//    => "strategy(전략 패턴)"
//	  => "Edit / IValidator" 예제

// 2. 템플릿 인자로 교체
//	  => 실행시간 교체 안됨.
//    => 정책 함수 인라인 치환 가능. 빠르다.
//	  => "Policy Base Design" - C++만의 기술
//    => "STL 의 모든 컨테이너는 "allocator" 를 교체 할수 있다.


// 디자인 패턴 : 언어에 무관하게 적용될수 있는 객체지향 디자인 기술
//             23개가 대표적 기술

// IDioms : 각 언어가 사용하는 대표적 디자인 기술
//       => C++ IDioms     : policy base
//       => Java IDioms 등
